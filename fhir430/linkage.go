// Copyright 2022 - Fasten Health
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir430

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/fastenhealth/gofhir-models-gen
// PLEASE DO NOT EDIT BY HAND

// Linkage is documented here http://hl7.org/fhir/StructureDefinition/Linkage
// Identifies two or more records (resource instances) that refer to the same real-world "occurrence".
type Linkage struct {
	Id                *string           `bson:"id,omitempty" json:"id,omitempty"`
	Meta              *Meta             `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules     *string           `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language          *string           `bson:"language,omitempty" json:"language,omitempty"`
	Text              *Narrative        `bson:"text,omitempty" json:"text,omitempty"`
	Contained         []json.RawMessage `bson:"contained,omitempty" json:"contained,omitempty"`
	Extension         []Extension       `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension       `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Active            *bool             `bson:"active,omitempty" json:"active,omitempty"`
	Author            *Reference        `bson:"author,omitempty" json:"author,omitempty"`
	Item              []LinkageItem     `bson:"item" json:"item"`
}

// Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
type LinkageItem struct {
	Id                *string     `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Type              LinkageType `bson:"type" json:"type"`
	Resource          Reference   `bson:"resource" json:"resource"`
}

// This function returns resource reference information
func (r Linkage) ResourceRef() (string, *string) {
	return "Linkage", r.Id
}

// This function returns resource reference information
func (r Linkage) ContainedResources() []json.RawMessage {
	return r.Contained
}

type OtherLinkage Linkage

// MarshalJSON marshals the given Linkage as JSON into a byte slice
func (r Linkage) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherLinkage
		ResourceType string `json:"resourceType"`
	}{
		OtherLinkage: OtherLinkage(r),
		ResourceType: "Linkage",
	})
}

// UnmarshalLinkage unmarshals a Linkage.
func UnmarshalLinkage(b []byte) (Linkage, error) {
	var linkage Linkage
	if err := json.Unmarshal(b, &linkage); err != nil {
		return linkage, err
	}
	return linkage, nil
}
