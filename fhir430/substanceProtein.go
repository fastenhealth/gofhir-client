// Copyright 2022 - Fasten Health
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir430

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/fastenhealth/gofhir-models-gen
// PLEASE DO NOT EDIT BY HAND

// SubstanceProtein is documented here http://hl7.org/fhir/StructureDefinition/SubstanceProtein
// A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators.
type SubstanceProtein struct {
	Id                *string                   `bson:"id,omitempty" json:"id,omitempty"`
	Meta              *Meta                     `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules     *string                   `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language          *string                   `bson:"language,omitempty" json:"language,omitempty"`
	Text              *Narrative                `bson:"text,omitempty" json:"text,omitempty"`
	Contained         []json.RawMessage         `bson:"contained,omitempty" json:"contained,omitempty"`
	Extension         []Extension               `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension               `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	SequenceType      *CodeableConcept          `bson:"sequenceType,omitempty" json:"sequenceType,omitempty"`
	NumberOfSubunits  *int                      `bson:"numberOfSubunits,omitempty" json:"numberOfSubunits,omitempty"`
	DisulfideLinkage  []string                  `bson:"disulfideLinkage,omitempty" json:"disulfideLinkage,omitempty"`
	Subunit           []SubstanceProteinSubunit `bson:"subunit,omitempty" json:"subunit,omitempty"`
}

// This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times.
type SubstanceProteinSubunit struct {
	Id                      *string     `bson:"id,omitempty" json:"id,omitempty"`
	Extension               []Extension `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension       []Extension `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Subunit                 *int        `bson:"subunit,omitempty" json:"subunit,omitempty"`
	Sequence                *string     `bson:"sequence,omitempty" json:"sequence,omitempty"`
	Length                  *int        `bson:"length,omitempty" json:"length,omitempty"`
	SequenceAttachment      *Attachment `bson:"sequenceAttachment,omitempty" json:"sequenceAttachment,omitempty"`
	NTerminalModificationId *Identifier `bson:"nTerminalModificationId,omitempty" json:"nTerminalModificationId,omitempty"`
	NTerminalModification   *string     `bson:"nTerminalModification,omitempty" json:"nTerminalModification,omitempty"`
	CTerminalModificationId *Identifier `bson:"cTerminalModificationId,omitempty" json:"cTerminalModificationId,omitempty"`
	CTerminalModification   *string     `bson:"cTerminalModification,omitempty" json:"cTerminalModification,omitempty"`
}

// This function returns resource reference information
func (r SubstanceProtein) ResourceRef() (string, *string) {
	return "SubstanceProtein", r.Id
}

// This function returns resource reference information
func (r SubstanceProtein) ContainedResources() []json.RawMessage {
	return r.Contained
}

type OtherSubstanceProtein SubstanceProtein

// MarshalJSON marshals the given SubstanceProtein as JSON into a byte slice
func (r SubstanceProtein) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherSubstanceProtein
		ResourceType string `json:"resourceType"`
	}{
		OtherSubstanceProtein: OtherSubstanceProtein(r),
		ResourceType:          "SubstanceProtein",
	})
}

// UnmarshalSubstanceProtein unmarshals a SubstanceProtein.
func UnmarshalSubstanceProtein(b []byte) (SubstanceProtein, error) {
	var substanceProtein SubstanceProtein
	if err := json.Unmarshal(b, &substanceProtein); err != nil {
		return substanceProtein, err
	}
	return substanceProtein, nil
}
